/*
 * This file is generated by jOOQ.
 */
package notesbackend.jooq.public_.tables;


import notesbackend.jooq.public_.Keys;
import notesbackend.jooq.public_.Public;
import notesbackend.jooq.public_.tables.Member.MemberPath;
import notesbackend.jooq.public_.tables.records.NotesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notes extends TableImpl<NotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.notes</code>
     */
    public static final Notes NOTES = new Notes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotesRecord> getRecordType() {
        return NotesRecord.class;
    }

    /**
     * The column <code>public.notes.id</code>.
     */
    public final TableField<NotesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.notes.createdAt</code>.
     */
    public final TableField<NotesRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.notes.user_id</code>.
     */
    public final TableField<NotesRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.notes.title</code>.
     */
    public final TableField<NotesRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.notes.text</code>.
     */
    public final TableField<NotesRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.notes.active</code>.
     */
    public final TableField<NotesRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private Notes(Name alias, Table<NotesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Notes(Name alias, Table<NotesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.notes</code> table reference
     */
    public Notes(String alias) {
        this(DSL.name(alias), NOTES);
    }

    /**
     * Create an aliased <code>public.notes</code> table reference
     */
    public Notes(Name alias) {
        this(alias, NOTES);
    }

    /**
     * Create a <code>public.notes</code> table reference
     */
    public Notes() {
        this(DSL.name("notes"), null);
    }

    public <O extends Record> Notes(Table<O> path, ForeignKey<O, NotesRecord> childPath, InverseForeignKey<O, NotesRecord> parentPath) {
        super(path, childPath, parentPath, NOTES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotesPath extends Notes implements Path<NotesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotesPath(Table<O> path, ForeignKey<O, NotesRecord> childPath, InverseForeignKey<O, NotesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotesPath(Name alias, Table<NotesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotesPath as(String alias) {
            return new NotesPath(DSL.name(alias), this);
        }

        @Override
        public NotesPath as(Name alias) {
            return new NotesPath(alias, this);
        }

        @Override
        public NotesPath as(Table<?> alias) {
            return new NotesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<NotesRecord, Integer> getIdentity() {
        return (Identity<NotesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotesRecord> getPrimaryKey() {
        return Keys.NOTES_PKEY;
    }

    @Override
    public List<ForeignKey<NotesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTES__OWNER);
    }

    private transient MemberPath _member;

    /**
     * Get the implicit join path to the <code>public.member</code> table.
     */
    public MemberPath member() {
        if (_member == null)
            _member = new MemberPath(this, Keys.NOTES__OWNER, null);

        return _member;
    }

    @Override
    public Notes as(String alias) {
        return new Notes(DSL.name(alias), this);
    }

    @Override
    public Notes as(Name alias) {
        return new Notes(alias, this);
    }

    @Override
    public Notes as(Table<?> alias) {
        return new Notes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notes rename(String name) {
        return new Notes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notes rename(Name name) {
        return new Notes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notes rename(Table<?> name) {
        return new Notes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notes where(Condition condition) {
        return new Notes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Notes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Notes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
