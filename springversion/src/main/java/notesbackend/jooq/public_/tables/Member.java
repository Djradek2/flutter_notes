/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.public_.tables;


import com.example.jooq.generated.public_.Keys;
import com.example.jooq.generated.public_.Public;
import com.example.jooq.generated.public_.tables.Notes.NotesPath;
import com.example.jooq.generated.public_.tables.records.MemberRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Member extends TableImpl<MemberRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.member</code>
     */
    public static final Member MEMBER = new Member();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberRecord> getRecordType() {
        return MemberRecord.class;
    }

    /**
     * The column <code>public.member.id</code>.
     */
    public final TableField<MemberRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.member.name</code>.
     */
    public final TableField<MemberRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.member.createdAt</code>.
     */
    public final TableField<MemberRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.member.password</code>.
     */
    public final TableField<MemberRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'1234'::character varying"), SQLDataType.VARCHAR)), this, "");

    private Member(Name alias, Table<MemberRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Member(Name alias, Table<MemberRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.member</code> table reference
     */
    public Member(String alias) {
        this(DSL.name(alias), MEMBER);
    }

    /**
     * Create an aliased <code>public.member</code> table reference
     */
    public Member(Name alias) {
        this(alias, MEMBER);
    }

    /**
     * Create a <code>public.member</code> table reference
     */
    public Member() {
        this(DSL.name("member"), null);
    }

    public <O extends Record> Member(Table<O> path, ForeignKey<O, MemberRecord> childPath, InverseForeignKey<O, MemberRecord> parentPath) {
        super(path, childPath, parentPath, MEMBER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MemberPath extends Member implements Path<MemberRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MemberPath(Table<O> path, ForeignKey<O, MemberRecord> childPath, InverseForeignKey<O, MemberRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MemberPath(Name alias, Table<MemberRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MemberPath as(String alias) {
            return new MemberPath(DSL.name(alias), this);
        }

        @Override
        public MemberPath as(Name alias) {
            return new MemberPath(alias, this);
        }

        @Override
        public MemberPath as(Table<?> alias) {
            return new MemberPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MemberRecord, Integer> getIdentity() {
        return (Identity<MemberRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MemberRecord> getPrimaryKey() {
        return Keys.USER_PKEY;
    }

    private transient NotesPath _notes;

    /**
     * Get the implicit to-many join path to the <code>public.notes</code> table
     */
    public NotesPath notes() {
        if (_notes == null)
            _notes = new NotesPath(this, null, Keys.NOTES__OWNER.getInverseKey());

        return _notes;
    }

    @Override
    public Member as(String alias) {
        return new Member(DSL.name(alias), this);
    }

    @Override
    public Member as(Name alias) {
        return new Member(alias, this);
    }

    @Override
    public Member as(Table<?> alias) {
        return new Member(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Member rename(String name) {
        return new Member(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Member rename(Name name) {
        return new Member(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Member rename(Table<?> name) {
        return new Member(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Member where(Condition condition) {
        return new Member(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Member where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Member where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Member where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Member where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Member where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Member where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Member where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Member whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Member whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
